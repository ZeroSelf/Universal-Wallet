# Universal BRC-20 Extension

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?logo=typescript&logoColor=white)](https://www.typescriptlang.org/)
[![React](https://img.shields.io/badge/React-20232A?logo=react&logoColor=61DAFB)](https://reactjs.org/)

A next-generation browser extension wallet with native support for BRC-20 tokens, built on the Simplicity protocol. Features a modern, comprehensive Bitcoin and BRC-20 token management capabilities.

## ✨ Features

- **🔐 Secure Wallet Management**: HD wallet support with BIP39 seed phrases
- **🪙 BRC-20 Token Support**: Native support for BRC-20 tokens with full protocol integration
- **💰 Multi-Operation Transactions**: Batch multiple BRC-20 operations in a single Bitcoin transaction
- **🎨 Modern UI**: Clean, intuitive interface with dark/light themes
- **🔒 Security First**: Built with security best practices and hardware wallet support
- **🌐 Multi-Browser Support**: Chrome, Firefox, Edge, and Brave compatibility
- **📱 Responsive Design**: Works seamlessly across different screen sizes

## 🏗️ Architecture

This extension is built with a modern, modular architecture:

```
src/
├── ui-modern/          # Modern UI components
├── ui/                 # Core UI system with Redux state management
├── shared/             # Shared types, constants, and utilities
├── background/         # Service worker and background services
├── content-script/     # Content scripts for web page interaction
└── build/             # Build configuration and manifests
```

### Key Technologies

- **Frontend**: React 18, TypeScript, Tailwind CSS
- **State Management**: Redux Toolkit
- **Build System**: Webpack 5, Gulp
- **Crypto**: BitcoinJS, BIP39, BIP32
- **UI Framework**: Custom components with Framer Motion animations

## 🚀 Quick Start

### Prerequisites

- Node.js 16+ 
- npm or yarn
- Git

### Installation

1. **Clone the repository**
   ```bash
   git clone https://github.com/your-username/universal-brc20-extension.git
   cd universal-brc20-extension
   ```

2. **Install dependencies**
   ```bash
   npm install --legacy-peer-deps


3. **Build the extension**
   ```bash
   # Development build
   npm run build:chrome:mv3:dev

   ```

4. **Load the extension**
   - Open Chrome/Edge: `chrome://extensions/`
   - Enable "Developer mode"
   - Click "Load unpacked"
   - Select the `dist/` folder

## 📖 Development

### Available Scripts

```bash
# Development
npm run build:chrome:dev    # Chrome development build
npm run build:firefox:dev   # Firefox development build

# Production builds
npm run build:chrome        # Chrome production
# Code quality
npm run lint                # ESLint
npm run format              # Prettier
npm run test                # Run tests

# Utilities
npm run clean               # Clean build directory
npm run fix:modules         # Fix module dependencies
```

### Development Workflow

1. **Start development**
   ```bash
   npm run build:chrome:dev
   ```

2. **Load extension in browser**
   - Go to `chrome://extensions/`
   - Enable "Developer mode"
   - Click "Load unpacked"
   - Select the `dist/` folder

3. **Make changes**
   - Edit source files in `src/`
   - Rebuild with `npm run build:chrome:dev`
   - Reload extension in browser

## 🎨 UI Components

The extension features a modern, Apple-inspired design system:

### Modern UI Features
- **Clean Interface**: Minimalist design with focus on usability
- **Smooth Animations**: Framer Motion powered transitions
- **Responsive Layout**: Adapts to different screen sizes
- **Dark/Light Themes**: Automatic theme switching
- **Accessibility**: WCAG compliant components

### Key Screens
- **Welcome Screen**: Onboarding and wallet creation
- **Main Dashboard**: Balance overview and quick actions
- **Send/Receive**: Transaction management
- **Settings**: Wallet configuration and security
- **Token Management**: BRC-20 token operations

## 🔧 Configuration

### Environment Variables

Create a `.env` file in the root directory:

### Build Configuration

The extension supports multiple build configurations:

- **Development**: Debug mode with source maps
- **Production**: Optimized builds for stores
- **Testing**: Test-specific configurations



## 📦 Building for Production

### Chrome Web Store

```bash
npm run build:chrome
# Creates optimized build in dist/
```

### Firefox Add-ons

```bash
npm run build:firefox
# Creates Firefox-compatible build
```

### Edge Add-ons

```bash
npm run build:edge
# Creates Edge-compatible build
```

### Development Setup

1. Fork the repository
2. Create a feature branch: `git checkout -b feature/amazing-feature`
3. Make your changes
4. Run tests: `npm test`
5. Commit changes: `git commit -m 'Add amazing feature'`
6. Push to branch: `git push origin feature/amazing-feature`
7. Open a Pull Request

### Code Style

- Use TypeScript for all new code
- Follow ESLint configuration
- Write tests for new features
- Update documentation as needed

Site : universalfinance.app 
X : https://x.com/universal_fi
Telegram black node : https://t.me/theblacknode